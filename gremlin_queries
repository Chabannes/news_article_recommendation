

select whole graph:
g.V()

count number of articles:
g.V().hasLabel('article').count()


select most recent article:
g.V().hasLabel('article').order().by('publishedAt', decr).limit(1)


delete vertices that have source bbb-news:
g.V()
  .hasLabel('article')
  .not(has('source', 'bbc-news'))
  .limit(10)
  .drop()
  
 
select articles that have a similarity relationship > 0.7:
g.V().hasLabel('article').as('a').outE('similarity').has('value', gt(0.7)).inV().as('b')


select all articles where content contains the word sea
g.V().hasLabel('article').has('content', TextP.containing('sea'))

select vertices that have a sport property
g.V().hasLabel('article').has('sport')


get the similarity values in json format
g.V().hasLabel('article').has('title', TextP.containing('bar')).as('Article 1').as('Article 1').outE('similarity').has('value', gt(0.6)).as('Similarity').inV().as('Article 2').select('Similarity', 'Article 1', 'Article 2').limit(1)











# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure Functions: https://aka.ms/python-webapps-actions

name: Build and deploy Python project to Azure Function App - functionapp-amavla-articlegeneration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'article_microservices'
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'article_microservices' # set this to the path to your web app project, defaults to the repository root
  PYTHON_VERSION: '3.8' # set this to the python version to use (supports 3.6, 3.7, 3.8)

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python version
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      - name: Install dependencies
        run: pip install -r ./article_microservices/requirements.txt
        
      # Optional: Add step to run tests here

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: python-app
          path: |
            . 
            !venv/
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'development'
      url: ${{ steps.deploy-to-function.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: python-app
          path: .

      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        id: deploy-to-function
        with:
          app-name: 'FunctionApp-amavla-ArticleGeneration'
          slot-name: 'development'
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_6C29F5FF96C64B9D818F00E0D41CA7E2 }}
          scm-do-build-during-deployment: true
          enable-oryx-build: true
